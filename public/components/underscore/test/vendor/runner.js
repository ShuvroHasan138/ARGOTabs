function finished(){return page.evaluate(function(){return!!window.qunitDone})}function onfinishedTests(){var t=page.evaluate(function(){return JSON.stringify(window.qunitDone)});phantom.exit(JSON.parse(t).failed>0?1:0)}function addLogging(){window.document.addEventListener("DOMContentLoaded",function(){var t=[];QUnit.testDone(function(e){var n,r=e.module+": "+e.name;if(e.failed)for(console.log("Assertion Failed: "+r),n=0;n<t.length;n++)console.log("    "+t[n]);t=[]}),QUnit.log(function(e){var n;e.result||(n=e.message||"","undefined"!=typeof e.expected&&(n&&(n+=", "),n+="expected: "+e.expected+", but was: "+e.actual),t.push("Failed assertion: "+n))}),QUnit.done(function(t){console.log("Took "+t.runtime+"ms to run "+t.total+" tests. "+t.passed+" passed, "+t.failed+" failed."),window.qunitDone=t})},!1)}var url=phantom.args[0],page=require("webpage").create();page.onConsoleMessage=function(t){console.log(t)},page.onInitialized=function(){page.evaluate(addLogging)},page.open(url,function(t){if("success"!==t)console.log("Unable to access network: "+t),phantom.exit(1);else var e=setInterval(function(){finished()&&(clearInterval(e),onfinishedTests())},500)});